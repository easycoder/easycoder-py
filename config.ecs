!   config.ecs

    script Configurator

    use graphics

    window Window
    window Dialog
    layout MainPanel
    layout LeftPanel
    layout RightPanel
    layout DeviceHPanel
    layout OuterLayout
    layout Layout
    layout VLayout
    layout HLayout
    groupbox Group
    label Label
    label RelayStateLabel
    label StatusLabel
    label SSIDLabel
    pushbutton ResetConfigButton
    pushbutton ScanDevicesButton
    pushbutton ClearSystemButton
    pushbutton RemoveSlaveButton
    pushbutton UpdateDeviceButton
    pushbutton DeleteFileButton
    pushbutton ExitButton
    pushbutton ScanSystemsButton
    pushbutton RemoveSystemButton
    pushbutton MasterDeviceButton
    pushbutton RelayOffButton
    pushbutton RelayOnButton
    pushbutton UpdateWidgetDataButton
    pushbutton OKButton
    pushbutton CancelButton
    lineinput LineInput
    lineinput DeviceNameInput
    lineinput LEDPinInput
    lineinput RelayPinInput
    lineinput DHT22PinInput
    lineinput PathInput
    listbox ListBox
    listbox SlaveList
    combobox SystemsCombo
    checkbox LEDInvertCheckbox
    checkbox RelayInvertCheckbox
    messagebox MessageBox

!    debug step

    log `Starting`
    init graphics
    create MainPanel type QHBoxLayout

    ! Do the left-hand panel

    create LeftPanel type QVBoxLayout
    add LeftPanel to MainPanel

    add stretch to LeftPanel

    create ResetConfigButton text `Reset everything`
    on click ResetConfigButton go to ResetConfigFileClick
    add ResetConfigButton to LeftPanel

    create ClearSystemButton text `Clear the selected system`
    on click ClearSystemButton go to ClearSystemClick
    add ClearSystemButton to LeftPanel

    add stretch to LeftPanel

    create ScanDevicesButton text `Scan for devices`
    on click ScanDevicesButton go to ScanForDevicesClick
    add ScanDevicesButton to LeftPanel

    create UpdateDeviceButton text `Update device`
    on click UpdateDeviceButton go to UpdateDeviceClick
    add UpdateDeviceButton to LeftPanel

    create DeleteFileButton text `Delete file`
    add DeleteFileButton to LeftPanel
    on click DeleteFileButton go to DeleteFileClick

    create RemoveSlaveButton text `Remove slave`
    add RemoveSlaveButton to LeftPanel
    on click RemoveSlaveButton go to RemoveSlaveClick

    add stretch to LeftPanel

    create ExitButton text `Exit`
    add ExitButton to LeftPanel
    on click ExitButton go to ExitClick

    ! Now do the right-hand panel

    create RightPanel type QVBoxLayout
    add stretch RightPanel to MainPanel

    ! Create the system name group
    create Group title `Systems`
    set the height of Group to 50
    add Group to RightPanel
    create Layout type QHBoxLayout
    add Layout to Group
    create SystemsCombo
    on select SystemsCombo go to SystemsComboSelect
    add stretch SystemsCombo to Layout
    create ScanSystemsButton text `System Scan`
    disable ScanSystemsButton
    on click ScanSystemsButton go to ScanSystemsClick
    add ScanSystemsButton to Layout
    create RemoveSystemButton text `Remove`
    disable RemoveSystemButton
    on click RemoveSystemButton go to RemoveSystemClick
    add RemoveSystemButton to Layout
    
    ! Create the Master Device group
    create Group title `Master device`
    set the height of Group to 50
    add Group to RightPanel
    create Layout type QHBoxLayout
    add Layout to Group
    create MasterDeviceButton text ``
    add MasterDeviceButton to Layout
    on click MasterDeviceButton go to MasterDeviceClick
    
    ! Create the Slave Devices group
    create Group title `Slave devices`
    set the height of Group to 150
    add Group to RightPanel
    create Layout type QHBoxLayout
    add Layout to Group
    create SlaveList
    add SlaveList to Layout
    on select SlaveList go to SelectSlaveClick

    ! Create the Selected Device group
    create Group title `Selected device`
    set the height of Group to 150
    add Group to RightPanel

    create DeviceHPanel type QHBoxLayout
    add DeviceHPanel to Group

    create OuterLayout type QVBoxLayout
    add OuterLayout to DeviceHPanel

    create Layout type QHBoxLayout
    add Layout to OuterLayout
    create Label text `Name:`
    add Label to Layout
    create DeviceNameInput size 40
    add DeviceNameInput to Layout
    create Label text `SSID:`
    add Label to Layout
    create SSIDLabel
    add SSIDLabel to Layout
    add stretch to Layout
    
    create Layout type QHBoxLayout
    add Layout to OuterLayout
    create Label text `LED Pin:`
    add Label to Layout
    create LEDPinInput size 5
    add LEDPinInput to Layout
    create LEDInvertCheckbox text `Inverted`
    add LEDInvertCheckbox to Layout
    add stretch to Layout
    
    create Layout type QHBoxLayout
    add Layout to OuterLayout
    create Label text `Relay Pin:`
    add Label to Layout
    create RelayPinInput size 5
    add RelayPinInput to Layout
    create RelayInvertCheckbox text `Inverted`
    add RelayInvertCheckbox to Layout
    create RelayOffButton size 5 text `-`
    on click RelayOffButton go to RelayOffClick
    add RelayOffButton to Layout
    create RelayOnButton size 5 text `+`
    on click RelayOnButton go to RelayOnClick
    add RelayOnButton to Layout
    create RelayStateLabel size 5 text `???`
    add RelayStateLabel to Layout
    add stretch to Layout
    
    create Layout type QHBoxLayout
    add Layout to OuterLayout
    create Label text `DHT22 Pin:`
    add Label to Layout
    create DHT22PinInput size 5
    add DHT22PinInput to Layout
    add stretch to Layout
    
    create Layout type QHBoxLayout
    add Layout to OuterLayout
    create Label text `Path:`
    add Label to Layout
    create PathInput size 60
    set the width of PathInput to 250
    add PathInput to Layout
    add stretch to Layout

    ! The 'Update' button
    create UpdateWidgetDataButton text `Update`
    on click UpdateWidgetDataButton go to UpdateWidgetDataClick
    add UpdateWidgetDataButton to DeviceHPanel

    add stretch to RightPanel

    create StatusLabel align right
    gosub to OK 
    add StatusLabel to RightPanel

    create Window title `RBR-Now configurator` size 700 500 layout MainPanel
    show Window

    start graphics

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    variable Config
    variable ConfigFile
    variable Name
    variable Value
    variable ReturnValue
    variable Title
    variable Result
    variable List
    variable Item
    variable HostSSID
    variable HostPassword
    variable SSID
    variable MAC
    variable Password
    variable IPAddr
    variable MyIPAddr
    variable Prompt
    variable SystemConfig
    variable SystemCallResult
    variable SystemName
    variable SystemMAC
    variable SystemPassword
    variable StatusMessage
    variable Message
    variable Message2
    variable Response
    variable Systems
    variable Devices
    variable Device
    variable MasterDevice
    variable MasterSSID
    variable MasterMAC
    variable MasterIPAddr
    variable MasterDeviceName
    variable SlaveDevices
    variable CurrentSSID
    variable IsMaster
    variable Changed
    variable FileName
    variable FileSize
    variable SendFail
    variable ErrorFlag
    variable Sequence
    variable Start
    variable Finish
    variable Total
    variable Segment
    variable Length
    variable Path
    variable Content
    variable APInfo
    variable Info
    variable Keys
    variable URL
    variable Pins
    variable Pin
    variable D
    variable N
    variable P
    variable S

!    debug step

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   The main program starts here
Start:

!   Disable various buttons
    disable ClearSystemButton
    disable ScanDevicesButton
    disable RemoveSlaveButton
    disable UpdateDeviceButton
    disable DeleteFileButton

    set the encoding to `hex`

!   Load the main config file or create one if there is none
    put trim system `echo $HOME` cat `/.rbr.conf` into ConfigFile
    load Config from ConfigFile
    if Config is empty put json `{}` into Config else put json Config into Config

!   Look for the host SSID and password. If they're not found, scan for them
    if Config does not have property `host-ssid` gosub to GetHost

!   Check we're on the right AP. If not, connect to it
    put `Checking current SSID...` into StatusMessage
    gosub to Working
    put trim system `LANG=C nmcli -t -f active,ssid dev wifi | grep ^yes | cut -d: -f2-` into HostSSID
    if HostSSID is not property `host-ssid` of Config gosub to ConnectToHost
    put `Connected to ` cat HostSSID into StatusMessage
    gosub to Idle

!   Get the list of systems, or create an empty list. Then populate the combo box
    if Config has property `systems` put property `systems` of Config into Systems
    else
    begin
        put json `{}` into Systems
        set property `systems` of Config to Systems
    end
    gosub to RefreshSystemsCombo

    put property `host-ssid` of Config into HostSSID
    put property `host-password` of Config into HostPassword

!    gosub to GetAllConfigData
    if ErrorFlag stop

!   Select the current system
    if Config has property `current` put property `current` of Config into Name
    else
    begin
        if the count of SystemsCombo is 0 put empty into Name
        else
        begin
            put the keys of Systems into Keys
            put element 0 of Keys into Name
        end
        set property `current` of Config to Name
    end
    if Name is not empty
    begin
        select Name in SystemsCombo
        enable ClearSystemButton
    end

    enable ScanSystemsButton
    if the count of SystemsCombo is not 0 enable ScanDevicesButton
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Reset the entire system
ResetConfigFileClick:
    create MessageBox on Window
        style question
        title `Master reset`
        message `This will remove all information. Continue?`
    show MessageBox giving Value
    if Value is `Yes`
    begin
        delete file ConfigFile
        disable RemoveSystemButton
        set the text of MasterDeviceButton to `(none)`
        clear SlaveList
        go to Start
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Scan the local network for system controllers
ScanSystemsClick:
    log `Scan for system controllers`
    disable ScanSystemsButton
    gosub to ScanSystems
stop
    gosub to RefreshSystemsCombo
    enable ScanSystemsButton
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Scan the network for RBR system controllers
ScanSystems:
    put trim system `hostname -I` into MyIPAddr
!    log MyIPAddr
    put the position of the last `.` in MyIPAddr into P
    increment P
    put left P of MyIPAddr into Value
    put json `[]` into List
    put 245 into N
    while N is less than 250
    begin
        put Value cat N into IPAddr
        put `Scanning ` cat IPAddr into StatusMessage
        gosub to Working
        get Result from url `http://` cat IPAddr cat `:17348/cgi-bin/mac.py` timeout 1 or go to SS2
        put trim Result into Result
        log Result
        log IPAddr cat `: ` cat Result
        put the position of ` ` in Result into P
        put left P of Result into MAC
        increment P
        put from P of Result into Result
        put the position of ` ` in Result into P
        put left P of Result into Password
        increment P
        put from P of Result into Name
        put json `{}` into Item
        set property `ipaddr` of Item to IPAddr
        set property `mac` of Item to MAC
        set property `password` of Item to Password
        set property Name of Systems to Item
        log `Adding ` cat Name cat ` to Systems`
        set property `systems` of Config to Systems
        gosub to SaveConfigFile
        append IPAddr to List    ! What's this for?
    SS2:
        wait 10 ticks
        increment N
    end
    put the keys of Systems into Keys
    put element 0 of Keys into Name
    set property `current` of Config to Name
    add Name to SystemsCombo
    enable ScanDevicesButton
    go to OK

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Refresh the systems combobox
RefreshSystemsCombo:
    log `Refresh SystemsCombo`
    clear SystemsCombo
    put the keys of Systems into Keys
    put 0 into S
    while S is less than the count of Keys
    begin
        put element S of Keys into Name
        log `Add ` cat Name cat ` to SystemsCombo`
        add Name to SystemsCombo
        enable RemoveSystemButton
        increment S
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Select a system from the combo box
SystemsComboSelect:
    put SystemsCombo into SystemName
    log `Select system ` cat SystemName
    set property `current` of Config to SystemName
    gosub to GetConfigData
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Remove a system from the combo box
RemoveSystemClick:
    put SystemsCombo into Name
    log `Remove ` cat Name cat `?`
    create MessageBox on Window
        style question
        title `Remove system`
        message `Continue you want to remove ` cat Name cat `?`
    show MessageBox giving Value
    if Value is `Yes`
    begin
        remove the current item from SystemsCombo
        delete property Name of Systems
        set property `systems` of Config to Systems
    end
    if the count of SystemsCombo is 0 disable RemoveSystemButton
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Get the config data for a system
GetConfigData:
    if SystemName is empty return
    log `Get the config data for ` cat SystemName
    put property `systems` of Config into Systems
    put property SystemName of Systems into SystemConfig
    put property `mac` of SystemConfig into SystemMAC
    put property `password` of SystemConfig into SystemPassword
    log SystemMAC cat ` ` cat SystemPassword
    get Value from url `https://rbrheating.com/ui/resources/php/rest.php/config/`
        cat SystemMAC cat `/` cat SystemPassword
    or
    begin
        put `Can't read the config file for ` cat SystemName cat `(` cat MAC cat `/` cat Password cat `)` into StatusMessage
        go to Error
    end
    clear Changed
    if Value is not `{}`
    begin
        put json Value into SystemConfig
        set Changed
    end
    if SystemConfig does not have property `devices`
    begin
        set property `devices` of SystemConfig to json `{}`
        set Changed
    end
    if Changed
    begin
        set property SystemName of Systems to SystemConfig
        set property `systems` of Config to Systems
        gosub to SaveConfigFile
        gosub to PostConfigData
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Get the config data for all systems
GetAllConfigData:
return
    put the keys of Systems into Keys
    put 0 into S
    while S is less than the count of Keys
    begin
        put element S of Keys into Name
        gosub to GetConfigData
        increment S
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Clear all the data for the selected system
ClearSystemClick:
    create MessageBox on Window
        style question
        title `System clear`
        message `This will remove all devices from ` cat SystemsCombo 
            cat `. Continue?`
    show MessageBox giving Value
    if Value is `Yes`
    begin
        if CurrentSSID is not HostSSID gosub to ConnectToHost
        put property SystemName of Systems into SystemConfig
        put property `mac` of SystemConfig into SystemMAC
        put property `password` of SystemConfig into SystemPassword
        put json `{}` into Devices
        set property `devices` of SystemConfig to Devices
        set property SystemName of Systems to SystemConfig
        set the text of MasterDeviceButton to `(none)`
        put empty into MasterSSID
        clear SlaveList
        gosub to PostConfigData
        disable RemoveSystemButton
        gosub to OK
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Scan the local network for new devices
ScanForDevicesClick:
    disable ScanDevicesButton
    put `Scanning for new devices...` into StatusMessage
    log StatusMessage
    gosub to Working
    put property SystemName of Systems into SystemConfig
    put property `devices` of SystemConfig into Devices
    put system `nmcli device wifi list` into SystemCallResult
    split SystemCallResult
    put json `[]` into List
    put 1 into N
    while N is less than the elements of SystemCallResult
    begin
        index SystemCallResult to N
        put SystemCallResult into SSID
        if left 1 of SSID is `*` begin end
        else
        begin
            ! We only want RBR-Now-xxxxxxxxxxxx devices
            put trim SSID into SSID
            put the position of ` ` in SSID into P
            put from P of SSID into SSID
            put trim SSID into SSID
            put the position of ` ` in SSID into P
            put left P of SSID into SSID
            if left 7 of SSID is `RBR-Now`
            begin
                log `Found ` cat SSID
                ! Check if this one already exists
                put the keys of Devices into Keys
                put 0 into D
                while D is less than the count of Keys
                begin
                    put element D of Keys into Name
                    put property Name of Devices into Device
                    if SSID is property `ssid` of Device
                    begin
                        log SSID cat ` exists already`
                        go to SFDC2
                    end
                    increment D
                end
                append SSID to List
            end
        end
    SFDC2:
        increment N
    end
!    log `SSIDs: ` cat List
    if the count of List is 0
    begin
        put `No new devices were found` into StatusMessage
        log StatusMessage
        gosub to Idle
        enable ScanDevicesButton
        stop
    end
    put `Select Device` into Title
    put `Select a new device` into Prompt
    gosub to Working
    gosub to SelectSSIDFromList
    enable ScanDevicesButton
    if SSID is empty
    begin
        gosub to OK
        stop
    end
    else 
    begin
        gosub to SetupDevice
        if ErrorFlag stop
        gosub to ConnectToHost
        gosub to PostConfigData
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Select an SSID from the list
SelectSSIDFromList:
    create Layout type QVBoxLayout
    create Label text Prompt align center
    add Label to Layout
    create ListBox
    put 0 into N
    while N is less than the count of List
    begin
        add element N of List to ListBox
        increment N
    end
    on select ListBox
    begin
        put the current item in ListBox into SSID
        log `Selected ` cat SSID
        put SSID cat ` Selected ` into StatusMessage
        gosub to Idle
        close Dialog
        return
    end
    add ListBox to Layout
    add stretch to Layout
    create HLayout type QHBoxLayout
    create CancelButton text `Cancel`
    on click CancelButton
    begin
        put empty into Item
        close Dialog
        return
    end
    add CancelButton to HLayout
    add HLayout to Layout
    create Dialog title Title layout Layout size 250 200
    center Dialog on Window
    show Dialog
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Set up the device identified by SSID
SetupDevice:
    if SSID is HostSSID
    begin
        put `Oops - this is the host!` into StatusMessage
        go to Error
    end

    ! Connect to the device's AP and get basic data
    gosub to ConnectToDevice
    if ErrorFlag return
    put system `hostname -I` into IPAddr
    put the position of the last `.` in IPAddr into D
    increment D
    put left D of IPAddr into IPAddr
    put IPAddr cat `1` into IPAddr
    put `http://` cat IPAddr into URL
    put `Request AP details for ` cat SSID cat ` at ` cat URL into StatusMessage
    log StatusMessage
    gosub to Working
    get APInfo from url URL
    or begin
        put `Failed to interrogate ` cat SSID into StatusMessage
        go to Error
    end
    put trim APInfo into APInfo
    log `Device info: ` cat APInfo
    put APInfo into Info
    split Info on ` `
    if the elements of Info is less than 4
    begin
        put `Bad response from device: ` cat APInfo into StatusMessage
        go to Error
    end
    index Info to 2
    put Info into Name
    index Info to 0
    put Info into MAC

    ! Check if this is the first device to be configured. If so, make it the master.
    if MasterSSID is empty
    begin
        set IsMaster
        log `Deal with master ` cat Name
        put SSID into MasterSSID
        put Name into MasterDeviceName
        gosub to CreateDevice
        put Device into MasterDevice
        put MAC into MasterMAC
        put IPAddr into MasterIPAddr
        gosub to SendDeviceConfigFile
        if SendFail return
        gosub to RequestReset
        if SendFail return
        put `Give the device a few seconds to reboot` into StatusMessage
        gosub to Working
        wait 10
        gosub to ConnectToDevice
        put MasterSSID cat ` ` cat MasterName into StatusMessage
        gosub to Working
        disable MasterDeviceButton

        ! Get the master IP address
        put `http://` cat MasterIPAddr cat `/?mac=` cat MasterMAC cat `&msg=ipaddr` into URL
        put `Interrogate the master device` into StatusMessage
        gosub to Working
        get Response from url URL
        or begin
            put `Failed to get Master ip address of ` cat MasterSSID into StatusMessage
            go to Error
        end
        log Response
        if left 2 of Response is `OK`
        begin
            put from 3 of Response into MasterIPAddr
            put `Master ip address is ` cat MasterIPAddr into StatusMessage
            gosub to Idle
            set the text of MasterDeviceButton to MasterSSID cat ` ` cat MasterName cat ` ` cat MasterIPAddr cat ` ` cat Name
            set property `ipaddr` of MasterDevice to MasterIPAddr
        end
        else
        begin
            put `Failed to get Master ip address` into StatusMessage
            go to Error
        end
        disable RemoveSlaveButton
        enable MasterDeviceButton
        put MasterDevice into Device
        gosub to PopulateDeviceInfo
    end
    else
    begin
        clear IsMaster
        log `Deal with slave ` cat Name
        put the position of ` ` in Name into N
        increment N
        put from N of Name into Name
        append SSID cat ` ` cat Name to SlaveDevices
        set SlaveList to SlaveDevices
        gosub to CreateDevice
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Create a device entry in the config file
CreateDevice:
    log `Create Device`
    put json `{}` into Device
    put `(none)` into Name
    if IsMaster
    begin
        log `Create master device ` cat Name
        set property `hostssid` of Device to HostSSID
        set property `hostpass` of Device to HostPassword
        set property `ipaddr` of Device to empty
    end
    else log `Create slave device ` cat Name
        go to Abort
    set property `master` of Device to IsMaster
    set property `name` of Device to Name
    set property `ssid` of Device to SSID
    set property `channel` of Device to 1
    put json `{}` into Pins
    put json `{}` into Pin
    set property `pin` of Pin to empty
    set property `invert` of Pin to false
    set property `led` of Pins to Pin
    put json `{}` into Pin
    set property `pin` of Pin to empty
    set property `invert` of Pin to false
    set property `relay` of Pins to Pin
    put json `{}` into Pin
    set property `pin` of Pin to empty
    set property `dht22` of Pins to Pin
    set property `pins` of Device to Pins
    set property Name of Devices to Device
    set property `devices` of SystemConfig to Devices
    set property Name of Systems to SystemConfig
    set property `systems` of Config to Systems
    log prettify Config
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Show information about the master device
MasterDeviceClick:
    if MasterDeviceButton is not empty
    begin
        log `Select the master device`
        put MasterDevice into Device
        gosub to PopulateDeviceInfo
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Show information about a slave device
SelectSlaveClick:
    log `Select ` cat SlaveList
    put property SlaveList of Devices into Device
    gosub to PopulateDeviceInfo
    enable UpdateDeviceButton
    enable RemoveSlaveButton
    enable DeleteFileButton
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Update the files on the selected device
UpdateDeviceClick:
    log `Update the files om the selected device`
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Delete a file on the selected device
DeleteFileClick:
    log `Delete a file on the selected device`
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Remove a slave device from the list
RemoveSlaveClick:
    log `Remove the selected slave device`
    put SlaveList into Name
    log Name
    remove the selected item from SlaveList
    put the keys of Devices into Keys
    put 0 into D
    while D is less than the count of Keys
    begin
        put element D of Keys into Name
        put property Name of Devices into Device
        if property `master` of Device is false
        begin
            if property `name` of Device is Name
            begin
                delete property Name of Devices
!                set property `devices` of SystemConfig to Devices
                put property `name` of SystemConfig into Name
                set property Name of Systems to SystemConfig
                stop
            end
        end
        increment D
    end
    stop

UpdateWidgetDataClick:
    log Device
    set property `name` of Device to DeviceNameInput
    log Device
    put property `ssid` of Device into SSID
    put from 8 of SSID into MAC
    gosub to SendDeviceConfigFile
    stop

RelayOffClick:
    log `Turn the relay OFF`
    stop

RelayOnClick:
    log `Turn the relay ON`
    stop

ExitClick:
    log `Exit the configurator`
!    delete property `(none)` of Config
    save prettify Config to ConfigFile
    close Window
    exit

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Save the config file
SaveConfigFile:
    save prettify Config to ConfigFile
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Subroutines
GetHostPassword:
    log `Get the host password`
    put `Type the host password:` into Prompt
    put `Host password` into Title
    go to GetRequestedText

GetRequestedText:
    create VLayout type QVBoxLayout
    create Label text Prompt align centre
    add label to VLayout
    create HLayout type QHBoxLayout
    add HLayout to VLayout
    create LineInput size 40
    add stretch LineInput to HLayout
    create HLayout type QHBoxLayout
    add HLayout to VLayout
    create OKButton text `OK` size 6
    on click OKButton
    begin
        put LineInput into ReturnValue
        put `OK` into Result
        close Dialog
        return
    end
    add OKButton to HLayout
    create CancelButton text `Cancel` size 6
    on click CancelButton
    begin
        put `Cancel` into Result
        close Dialog
        return
    end
    add CancelButton to HLayout
    create Dialog title Title layout VLayout size 300 80
    center Dialog on Window
    show Dialog
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Scan the network for access points
GetAccessPoints:
    put `Scanning the local network...` into StatusMessage
    log StatusMessage
    gosub to Working
    put system `nmcli device wifi list` into Result
!    log Result
    gosub to OK
    split Result
    put json `[]` into List
    put 1 into N
    while N is less than the elements of Result
    begin
        index Result to N
        put Result into SSID
        if left 1 of SSID is `*` begin end
        else
        begin
            put trim SSID into SSID
            put the position of ` ` in SSID into P
            put from P of SSID into SSID
            put trim SSID into SSID
            put the position of ` ` in SSID into P
            put left P of SSID into SSID
            if SSID is empty go to SN2
            if left 1 of SSID is `-` go to SN2
            append SSID to List
        end
    SN2:
        increment N
    end
!    log `SSIDs: ` cat List
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Connect to the host router
ConnectToHost:
    put property `host-ssid` of Config into HostSSID
    put property `host-password` of Config into HostPassword
    put `Connect to host ` cat HostSSID cat ` with password ` cat HostPassword into StatusMessage
    log StatusMessage
    gosub to Working
    put system `nmcli dev wifi connect ` cat HostSSID cat ` password ` cat HostPassword into SystemCallResult
    split SystemCallResult on ` `
    if the elements of SystemCallResult is greater than 2
    begin
        index SystemCallResult to 2
        if SystemCallResult is `successfully`
        begin
            enable ScanDevicesButton
            put HostSSID into CurrentSSID
            put `Connected to ` cat HostSSID into StatusMessage
            log StatusMessage
            go to Idle
        end
    end
    put `Failed to connect to ` cat HostSSID into StatusMessage
    ! Fall into GetHost

GetHost:
    gosub to GetAccessPoints
    put `Select HostSSID` into Title
    put `Select the home router for this system` into Prompt
    gosub to SelectSSIDFromList
    if HostSSID is empty go to Start
    set property `host-ssid` of Config to HostSSID
    if Config does not have property `host-password` gosub to GetHostPassword
    set property `host-password` of Config to ReturnValue
    go to ConnectToHost

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Set up the system, given its name
SetupSystem:
    if Name is empty return
    put property Name of Systems into SystemConfig
    put property `mac` of SystemConfig into SystemMAC
    put property `password` of SystemConfig into SystemPassword
    put property `devices` of SystemConfig into Devices
    put the keys of Devices into Keys
    put empty into MasterDevice
    set the text of MasterDeviceButton to `(none)`
    put json `[]` into SlaveDevices
    clear SlaveList
    put 0 into D
    while D is less than the count of Keys
    begin
        put element D of Keys into Name
        put property Name of Devices into Device
        if property `master` of Device
        begin
            put Device into MasterDevice
            put property `name` of MasterDevice into MasterDeviceName
            put property `ssid` of MasterDevice into MasterSSID
            put property `ipaddr` of MasterDevice into MasterIPAddr
            set the text of MasterDeviceButton to MasterSSID cat ` ` cat MasterIPAddr cat ` ` cat MasterDeviceName
        end
        else
        begin
            append Name to SlaveDevices
            add Name to SlaveList
        end
        increment D
    end
    enable ScanDevicesButton
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Here when a connection failure occurs
FailedToConnect:
    log `Result: ` cat SystemCallResult
    set the elements of Value to 1
    put `Failed to connect to ` cat SSID into StatusMessage
    go to Error

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Connect to a device
ConnectToDevice:
    put `Connect to device ` cat SSID cat ` with password 00000000` into StatusMessage
    log StatusMessage
    gosub to Working
    put system `nmcli dev wifi connect ` cat SSID cat ` password 00000000` into SystemCallResult
    gosub to Working
    put SystemCallResult into Value
    split Value on ` `
    if the elements of Value is not greater than 2 go to FailedToConnect
    index Value to 2
    if Value is not `successfully` go to FailedToConnect
    put SSID into CurrentSSID
    put `Connected to ` cat SSID into StatusMessage
    gosub to Idle
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Populate the device information fields
PopulateDeviceInfo:
    if Device has property `name`
    begin
        log `Populate device ` cat property `name` of Device
        set the text of DeviceNameInput to property `name` of Device
        set the text of SSIDLabel to property `ssid` of Device
        enable UpdateDeviceButton
        enable DeleteFileButton
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Send the config file to a device
SendDeviceConfigFile:
    put `config.json` into FileName
    put stringify Device into Content

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Send a file to a device
SendFileToDevice:
    put the length of Content into FileSize
    put `Update device file ` cat FileName cat ` (size=` cat FileSize cat ` chars)` into StatusMessage
    log StatusMessage
    gosub to Working
    wait 2
    clear SendFail
    put 0 into Sequence
    put 0 into Start
    put 0 into Total
    while Start is less than FileSize
    begin
        if Finish is greater than FileSize put FileSize into Finish
        add 100 to Start giving Finish
        put from Start to Finish of Content into Segment
        put the length of Segment into Length
        add Length to Total
        put encode Segment into Segment
        put `Send part ` cat Sequence into StatusMessage
        gosub to Working
        put `part:`  cat Sequence cat `,text:` cat Segment into Message
        gosub to SendMessageToDevice
        log `Part ` cat Sequence cat `: ` cat Response
        split Response on ` `
        index Response to 0
        if Response is not Length
        begin
            put `Failed to send part ` cat Sequence into StatusMessage
            gosub to Idle
            set SendFail
            return
        end
        put Finish into Start
        increment Sequence
    end
    log `Trigger the save of ` cat FileName
    put `save:` cat FileName into Message
    gosub to SendMessageToDevice
    split Response on ` `
    index Response to 0
    if Response is not Total
    begin
        put `Mismatched length: ` cat Total cat ` - ` cat Response into StatusMessage
        gosub to Working
        log StatusMessage
        set SendFail
        return
    end
    put `File ` cat FileName cat ` saved` into StatusMessage
    gosub to Working
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Delete a file on a device
DeleteFile:
!    get FileName from popup text `File name:` `Confirm delete`
!    put from 8 of property `ssid` of Device into MAC
!    put `http://` cat MasterIPAddr cat `/?mac=` cat MAC cat `&msg=delete:` cat FileName into URL
!    get Response from url URL
!    or begin
!        log `Save failed`
!        set SendFail
!        return
!    end
!    log Response
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Send a reset message to a device
RequestReset:
    gosub to GetDeviceData
    log `Reset device ` cat Name
    put `Reset ` cat Name into StatusMessage
    gosub to Working
    wait 1
    put `reset` into Message
    gosub to SendRBRMessage
    if left 2 of Response is not `OK`
    begin
        put `Failed to reset ` cat Name into StatusMessage
        go to Error
    end
    put `Device has been reset` into StatusMessage
    go to Idle

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Send an RBR-Now message to a device
SendRBRMessage:
    gosub to SendMessageToDevice
!    log URL cat ` -> ` cat Response
    if left 2 of Response is `OK` return
    put `Bad response from ` cat Name into StatusMessage
    log StatusMessage
    gosub to Idle
    if Path is not empty
    begin
        log `Retry without path`
        set property `path` of Device to empty
        go to SendMessageToDevice
    end
    put empty into Response
    set ErrorFlag
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Send a message to a RBR-Now device
SendMessageToDevice:
    gosub to GetDeviceData
    put left 30 of Message into Message2
    log `Send '` cat Message2 cat `' to ` cat Name
    put Message into Message2
    if Path is not empty
    begin
        put the position of `,` in Path into P
        if P is greater than 0
        begin
            put left P of Path into MAC
            add 1 to P
            put from P of Path into Path
            put `!` cat Path cat `,` cat Message into Message2
        end
        else
        begin
            put `!` cat MAC cat `,` cat Message into Message2
            put Path into MAC
        end
    end
    put `http://` cat MasterIPAddr cat `/?mac=` cat MAC cat `&msg=` cat Message2 into URL
    log URL
    get Response from url URL
    or begin
        put `Could not message ` cat Name into StatusMessage
        log StatusMessage
        gosub to Idle
        ! Try direct communication
        if Path is not empty go to RetryWithoutPath
        put empty into Response
        return
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Get data from a device
GetDeviceData:
    put property `name` of Device into Name
    put property `ssid` of Device into SSID
    put from 8 of SSID into MAC
    if Device has property `path` put property `path` of Device into Path
    else
    begin
        put empty into Path
        set property `path` of Device to Path
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Post the config data
PostConfigData:
    if CurrentSSID is not HostSSID gosub to ConnectToHost
    save prettify Config to ConfigFile
return
    put `https://rbrheating.com/ui/resources/php/rest.php/config/` cat SystemMAC cat `/` cat SystemPassword into URL
    log `Posting Config to ` cat URL
    post stringify Config to URL
    or
    begin
        put `I couldn't post the config file` into StatusMessage
        go to Error
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   The Status box at the bottom of the screen
OK:
    put `OK` into StatusMessage

Idle:
    set the text of StatusLabel to `<font color="#008000">` cat StatusMessage cat `</font>`
    clear ErrorFlag
    return

Working:
    set the text of StatusLabel to `<font color="#0000e0">` cat StatusMessage cat `</font>`
    clear ErrorFlag
    wait 50 ticks
    return

Abort:
    put `Abort` into StatusMessage

Error:
    log StatusMessage
    set the text of StatusLabel to `<font color="#ff0000">` cat StatusMessage cat `</font>`
    set ErrorFlag
    return
